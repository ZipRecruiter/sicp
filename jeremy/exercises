1.4:

    returns a + |b|

1.5:

    Applicative-order evaluation will produce a stack overflow;
    normal-order evaluation will produce 0, because applicative-order
    will evaluate the arguments before passing them to test, and (p)
    will repeatedly call itself without ending, leading to a stack
    overflow.

1.6

    new-if will cause sqrt-iter to recurse forever, because on each
    call to it, new-if will cause the evaluation of both the then-clause
    and the else-clause, which will cause a recursive call to sqrt-iter,
    and so on.

1.9

    The first process is recursive (because it needs to keep track of
    the need to apply inc after the recursive call to + returns).
    The second process is iterative, because the recursive call to +
    is tail-recursive.

1.10

    (define (f n) (A 0 n)) ;; 2*n
    (define (g n) (A 1 n)) ;; 2**n (for n != 0)
    (define (h n) (A 2 n)) ;; 2**(2**(2**...)) for n levels

1.13

    Definition of Fibonacci numbers: f(0) = 0, f(1) = 1, f(n) = f(n-1) + f(n-2)

    Definition of golden ratios: phi = (1 + sqrt(5)) / 2, psi = (1 - sqrt(5)) / 2

    Verify initial conditions of induction:
        f(0) =? (phi**0 - psi**0) / sqrt(5) == (1 - 1) / sqrt(5) == 0
        f(1) =? (phi**1 - psi**1) / sqrt(5) == 2*sqrt(5)/2 / sqrt(5) == 1

    Inductive step:
        Assume f(n - 1) = (phi**(n-1) - psi**(n-1)) / sqrt(5) (and likewise for n-2)
        Then f(n) == f(n-1) + f(n-2) == (phi**(n-1) + phi**(n-2) - psi**(n-1) - psi**(n-2)) / sqrt(5)
        subtract (phi**n - psi**n) /sqrt(5) from each side:
        f(n) - (phi**n - psi**n) / sqrt(5) == (-phi**n + phi**(n-1) + phi**(n-2) + psi**n - psi**(n-1) - psi**(n-2)) / sqrt(5)
        == (phi**n * (-1 + phi**-1 + phi**-2) + psi**n * (1 - psi**-1 - psi**-2))) / sqrt(5)
        == (phi**n * (-6 -2*sqrt(5) + 2 + 2*sqrt(5) + 4) + psi**n * (6 - 2*sqrt(5) - 2 + 2*sqrt(5) - 4)) / sqrt(5)
        == (phi**n * 0 + psi**n * 0) / sqrt(5)
        == 0
        Therefor, f(n) - (phi**n - psi**n) / sqrt(5) == 0, so f(n) == (phi**n - psi**n) / sqrt(5), proving the inductive step

1.14

    11,5
    |    \
    11,4   -39,5
    |    \
    11,3  -14,4
    |   +---------------------------+
    11,2                            1,3
    |   +--------+                  |   \
    11,1         6,2                1,2  -4,3
    |   \        |  +-----+         |   \
    11,0 10,1    6,1      1,2       1,1  -4,2
        / |      /  \     |   \     |   \
    10,0 9,1    6,0  5,1  1,1  -4,2 1,0 0,1
        / |        /  |   |  \
     9,0  8,1   5,0  4,1  1,0 0,1
        /  |       /  |
     8,0  7,1   4,0  3,1
        /  |       /  |
     7,0  6,1   3,0  2,1
        /  |       /  |
     6,0  5,1   2,0  1,1
        /  |       /  |
     5,0  4,1   1,0  0,1
        /  |
     4,0  3,1
        /  |
     3,0  2,1
        /  |
     2,0  1,1
        /  |
     1,0  0,1

    O(n**2)? Because when the amount of money is large enough to allow
    multiple ways of making change, there's a sub-tree of depth n using
    pennies, then another sub-tree that starts by using a higher-value
    coin, then all pennies, and so on. So it's something like a fraction
    of n * (n-5) (plus smaller additional amounts for trees that start
    with dimes, quarters, and half-dollars). The branching of the trees
    is limited by the number of different coins (5) rather than n, so
    both space and time are O(n**2).

1.15a

    5 times (for calls to sine with parameter 12.15, 4.05, 1.35, 0.45, 0.15, and 0.05

1.15b

    O(log(a))

1.34

    The result of (f f) is (f 2), which in turn is (2 2), which doesn't
    work because 2 isn't a function!
